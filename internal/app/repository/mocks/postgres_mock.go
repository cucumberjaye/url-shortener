// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cucumberjaye/url-shortener/internal/app/service (interfaces: SQLRepository)

// Package mock_service is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSQLRepository is a mock of SQLRepository interface.
type MockSQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSQLRepositoryMockRecorder
}

// MockSQLRepositoryMockRecorder is the mock recorder for MockSQLRepository.
type MockSQLRepositoryMockRecorder struct {
	mock *MockSQLRepository
}

// NewMockSQLRepository creates a new mock instance.
func NewMockSQLRepository(ctrl *gomock.Controller) *MockSQLRepository {
	mock := &MockSQLRepository{ctrl: ctrl}
	mock.recorder = &MockSQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLRepository) EXPECT() *MockSQLRepositoryMockRecorder {
	return m.recorder
}

// CheckDBConn mocks base method.
func (m *MockSQLRepository) CheckDBConn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBConn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBConn indicates an expected call of CheckDBConn.
func (mr *MockSQLRepositoryMockRecorder) CheckDBConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBConn", reflect.TypeOf((*MockSQLRepository)(nil).CheckDBConn))
}
