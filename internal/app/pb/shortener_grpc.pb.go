// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/shortener.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShotenerService_Authentication_FullMethodName  = "/internal.app.pb.ShotenerService/Authentication"
	ShotenerService_GetFullURL_FullMethodName      = "/internal.app.pb.ShotenerService/GetFullURL"
	ShotenerService_Shortener_FullMethodName       = "/internal.app.pb.ShotenerService/Shortener"
	ShotenerService_Ping_FullMethodName            = "/internal.app.pb.ShotenerService/Ping"
	ShotenerService_BatchShortnener_FullMethodName = "/internal.app.pb.ShotenerService/BatchShortnener"
	ShotenerService_GetUserURL_FullMethodName      = "/internal.app.pb.ShotenerService/GetUserURL"
	ShotenerService_DeleteUserURL_FullMethodName   = "/internal.app.pb.ShotenerService/DeleteUserURL"
	ShotenerService_Stats_FullMethodName           = "/internal.app.pb.ShotenerService/Stats"
)

// ShotenerServiceClient is the client API for ShotenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShotenerServiceClient interface {
	Authentication(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthToken, error)
	GetFullURL(ctx context.Context, in *Short, opts ...grpc.CallOption) (*Original, error)
	Shortener(ctx context.Context, in *Original, opts ...grpc.CallOption) (*Short, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommonResponse, error)
	BatchShortnener(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	GetUserURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*URLsResponse, error)
	DeleteUserURL(ctx context.Context, in *BatchDelete, opts ...grpc.CallOption) (*CommonResponse, error)
	Stats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsInfo, error)
}

type shotenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShotenerServiceClient(cc grpc.ClientConnInterface) ShotenerServiceClient {
	return &shotenerServiceClient{cc}
}

func (c *shotenerServiceClient) Authentication(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, ShotenerService_Authentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) GetFullURL(ctx context.Context, in *Short, opts ...grpc.CallOption) (*Original, error) {
	out := new(Original)
	err := c.cc.Invoke(ctx, ShotenerService_GetFullURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) Shortener(ctx context.Context, in *Original, opts ...grpc.CallOption) (*Short, error) {
	out := new(Short)
	err := c.cc.Invoke(ctx, ShotenerService_Shortener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, ShotenerService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) BatchShortnener(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, ShotenerService_BatchShortnener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) GetUserURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*URLsResponse, error) {
	out := new(URLsResponse)
	err := c.cc.Invoke(ctx, ShotenerService_GetUserURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) DeleteUserURL(ctx context.Context, in *BatchDelete, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, ShotenerService_DeleteUserURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerServiceClient) Stats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsInfo, error) {
	out := new(StatsInfo)
	err := c.cc.Invoke(ctx, ShotenerService_Stats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShotenerServiceServer is the server API for ShotenerService service.
// All implementations must embed UnimplementedShotenerServiceServer
// for forward compatibility
type ShotenerServiceServer interface {
	Authentication(context.Context, *Empty) (*AuthToken, error)
	GetFullURL(context.Context, *Short) (*Original, error)
	Shortener(context.Context, *Original) (*Short, error)
	Ping(context.Context, *Empty) (*CommonResponse, error)
	BatchShortnener(context.Context, *BatchRequest) (*BatchResponse, error)
	GetUserURL(context.Context, *Empty) (*URLsResponse, error)
	DeleteUserURL(context.Context, *BatchDelete) (*CommonResponse, error)
	Stats(context.Context, *Empty) (*StatsInfo, error)
	mustEmbedUnimplementedShotenerServiceServer()
}

// UnimplementedShotenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShotenerServiceServer struct {
}

func (UnimplementedShotenerServiceServer) Authentication(context.Context, *Empty) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedShotenerServiceServer) GetFullURL(context.Context, *Short) (*Original, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullURL not implemented")
}
func (UnimplementedShotenerServiceServer) Shortener(context.Context, *Original) (*Short, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shortener not implemented")
}
func (UnimplementedShotenerServiceServer) Ping(context.Context, *Empty) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShotenerServiceServer) BatchShortnener(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchShortnener not implemented")
}
func (UnimplementedShotenerServiceServer) GetUserURL(context.Context, *Empty) (*URLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURL not implemented")
}
func (UnimplementedShotenerServiceServer) DeleteUserURL(context.Context, *BatchDelete) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURL not implemented")
}
func (UnimplementedShotenerServiceServer) Stats(context.Context, *Empty) (*StatsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedShotenerServiceServer) mustEmbedUnimplementedShotenerServiceServer() {}

// UnsafeShotenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShotenerServiceServer will
// result in compilation errors.
type UnsafeShotenerServiceServer interface {
	mustEmbedUnimplementedShotenerServiceServer()
}

func RegisterShotenerServiceServer(s grpc.ServiceRegistrar, srv ShotenerServiceServer) {
	s.RegisterService(&ShotenerService_ServiceDesc, srv)
}

func _ShotenerService_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_Authentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).Authentication(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_GetFullURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Short)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).GetFullURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_GetFullURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).GetFullURL(ctx, req.(*Short))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_Shortener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Original)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).Shortener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_Shortener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).Shortener(ctx, req.(*Original))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_BatchShortnener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).BatchShortnener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_BatchShortnener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).BatchShortnener(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_GetUserURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).GetUserURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_GetUserURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).GetUserURL(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_DeleteUserURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).DeleteUserURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_DeleteUserURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).DeleteUserURL(ctx, req.(*BatchDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShotenerService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShotenerService_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServiceServer).Stats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShotenerService_ServiceDesc is the grpc.ServiceDesc for ShotenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShotenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.app.pb.ShotenerService",
	HandlerType: (*ShotenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authentication",
			Handler:    _ShotenerService_Authentication_Handler,
		},
		{
			MethodName: "GetFullURL",
			Handler:    _ShotenerService_GetFullURL_Handler,
		},
		{
			MethodName: "Shortener",
			Handler:    _ShotenerService_Shortener_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShotenerService_Ping_Handler,
		},
		{
			MethodName: "BatchShortnener",
			Handler:    _ShotenerService_BatchShortnener_Handler,
		},
		{
			MethodName: "GetUserURL",
			Handler:    _ShotenerService_GetUserURL_Handler,
		},
		{
			MethodName: "DeleteUserURL",
			Handler:    _ShotenerService_DeleteUserURL_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _ShotenerService_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
